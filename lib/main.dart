import 'dart:async';
import 'dart:math';

import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/services.dart';

void main() {
  runApp(const MainApp());
}

class MainApp extends StatelessWidget {
  const MainApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(title: 'Crystal Basket', theme: ThemeData(primarySwatch: Colors.blue), home: const GameScreen());
  }
}

class GameScreen extends StatefulWidget {
  const GameScreen({super.key});

  @override
  State<GameScreen> createState() => _GameScreenState();
}

class _GameScreenState extends State<GameScreen> {
  // –ü–æ–∑–∏—Ü–∏—è –∫–æ—Ä–∑–∏–Ω–∫–∏
  double playerX = 0.0;

  // –†–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
  late double screenWidth;
  late double screenHeight;

  // –ö—Ä–∏—Å—Ç–∞–ª–ª—ã
  List<Crystal> crystals = [];

  // –¢–∞–π–º–µ—Ä—ã
  Ticker? gameTimer;
  Timer? speedTimer;

  // –°–∫–æ—Ä–æ—Å—Ç—å –ø–∞–¥–µ–Ω–∏—è –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
  double fallSpeed = 3.0;

  // –°—á–µ—Ç
  int score = 0;

  // –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
  int missedCrystals = 0;

  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
  static const int maxMissedCrystals = 3;

  // –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
  bool isGameOver = false;

  // –°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–∫–∏
  static const double moveSpeed = 8.0;

  // –§–ª–∞–≥–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç—ã—Ö –∫–ª–∞–≤–∏—à
  bool isMovingLeft = false;
  bool isMovingRight = false;

  // FocusNode –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  final FocusNode _focusNode = FocusNode();

  @override
  void initState() {
    super.initState();
    startGame();
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
  void startGame() {
    score = 0;
    missedCrystals = 0;
    isGameOver = false;
    fallSpeed = 3.0;
    isMovingLeft = false;
    isMovingRight = false;
    crystals.clear();

    // –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã —Å —á–∞—Å—Ç–æ—Ç–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Ticker –≤–º–µ—Å—Ç–æ Timer
    gameTimer = Ticker((timer) {
      if (!isGameOver) {
        updateGame();
      }
    });
    gameTimer?.start();

    // –¢–∞–π–º–µ—Ä —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    speedTimer = Timer.periodic(const Duration(seconds: 5), (timer) {
      if (!isGameOver) {
        setState(() {
          fallSpeed += 0.5; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        });
      }
    });
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É
  void updateGame() {
    setState(() {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–æ—Ä–∑–∏–Ω–∫–∏
      if (isMovingLeft) {
        playerX = (playerX - moveSpeed).clamp(0.0, screenWidth - 50);
      }
      if (isMovingRight) {
        playerX = (playerX + moveSpeed).clamp(0.0, screenWidth - 50);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
      for (int i = 0; i < crystals.length; i++) {
        crystals[i] = Crystal(x: crystals[i].x, y: crystals[i].y + fallSpeed);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
      for (var crystal in crystals.toList()) {
        if (crystal.y > screenHeight) {
          crystals.remove(crystal);
          missedCrystals++;
          if (missedCrystals >= maxMissedCrystals) {
            gameOver();
            return;
          }
        }
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
      if (Random().nextDouble() < 0.02) {
        crystals.add(Crystal(x: Random().nextDouble() * (screenWidth - 50), y: -50));
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±–æ—Ä –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
      for (var crystal in crystals.toList()) {
        if (checkCollection(crystal)) {
          crystals.remove(crystal);
          score += 10;
        }
      }
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±–æ—Ä –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
  bool checkCollection(Crystal crystal) {
    return (playerX < crystal.x + 50 &&
        playerX + 50 > crystal.x &&
        screenHeight - 100 < crystal.y + 50 &&
        screenHeight - 100 + 50 > crystal.y);
  }

  // –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
  void gameOver() {
    setState(() {
      isGameOver = true;
      gameTimer?.dispose();
      speedTimer?.cancel();
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
  void _handleKeyEvent(KeyEvent event) {
    if (event is KeyDownEvent) {
      if (event.logicalKey == LogicalKeyboardKey.arrowLeft) {
        isMovingLeft = true;
      } else if (event.logicalKey == LogicalKeyboardKey.arrowRight) {
        isMovingRight = true;
      }
    } else if (event is KeyUpEvent) {
      if (event.logicalKey == LogicalKeyboardKey.arrowLeft) {
        isMovingLeft = false;
      } else if (event.logicalKey == LogicalKeyboardKey.arrowRight) {
        isMovingRight = false;
      }
    }
  }

  @override
  void dispose() {
    _focusNode.dispose();
    gameTimer?.dispose();
    speedTimer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    screenWidth = MediaQuery.sizeOf(context).width;
    screenHeight = MediaQuery.sizeOf(context).height;

    return KeyboardListener(
      focusNode: _focusNode,
      autofocus: true,
      onKeyEvent: _handleKeyEvent,
      child: GestureDetector(
        onHorizontalDragUpdate: (details) {
          setState(() {
            playerX += details.delta.dx;
            playerX = playerX.clamp(0.0, screenWidth - 50);
          });
        },
        child: Scaffold(
          backgroundColor: Colors.grey[200],
          body: Stack(
            children: [
              // –ö–æ—Ä–∑–∏–Ω–∫–∞
              Positioned(
                left: playerX,
                bottom: 100,
                child: Container(
                  width: 50,
                  height: 50,
                  color: Colors.transparent,
                  child: const Center(child: Text('üß∫', style: TextStyle(fontSize: 30))),
                ),
              ),
              // –ö—Ä–∏—Å—Ç–∞–ª–ª—ã
              ...crystals.map(
                (crystal) => Positioned(
                  left: crystal.x,
                  top: crystal.y,
                  child: Container(
                    width: 50,
                    height: 50,
                    color: Colors.transparent,
                    child: const Center(child: Text('üíé', style: TextStyle(fontSize: 30))),
                  ),
                ),
              ),
              // –°—á–µ—Ç—á–∏–∫–∏
              Positioned(
                top: 50,
                left: 20,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text('Score: $score', style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
                    Text('Speed: ${fallSpeed.toStringAsFixed(1)}', style: const TextStyle(fontSize: 18)),
                    Text(
                      'Missed: $missedCrystals/$maxMissedCrystals',
                      style: const TextStyle(fontSize: 18, color: Colors.red),
                    ),
                  ],
                ),
              ),
              // –≠–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
              if (isGameOver)
                Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const Text('Game Over!', style: TextStyle(fontSize: 48, fontWeight: FontWeight.bold)),
                      const SizedBox(height: 20),
                      Text('Final Score: $score', style: const TextStyle(fontSize: 24)),
                      const SizedBox(height: 20),
                      ElevatedButton(
                        onPressed: () {
                          setState(() {
                            startGame();
                          });
                        },
                        child: const Text('Play Again'),
                      ),
                    ],
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }
}

class Crystal {
  final double x;
  final double y;

  const Crystal({required this.x, required this.y});
}
