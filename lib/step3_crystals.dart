import 'dart:async';
import 'dart:math';

import 'package:flutter/material.dart';

void main() {
  runApp(const MainApp());
}

class MainApp extends StatelessWidget {
  const MainApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Crystal Basket - Step 3',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: const GameScreen(),
    );
  }
}

class GameScreen extends StatefulWidget {
  const GameScreen({super.key});

  @override
  State<GameScreen> createState() => _GameScreenState();
}

class _GameScreenState extends State<GameScreen> {
  // –ü–æ–∑–∏—Ü–∏—è –∫–æ—Ä–∑–∏–Ω–∫–∏
  double playerX = 0.0;

  // –†–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
  late double screenWidth;
  late double screenHeight;

  // –ö—Ä–∏—Å—Ç–∞–ª–ª—ã
  List<Crystal> crystals = [];

  // –¢–∞–π–º–µ—Ä
  Timer? gameTimer;

  // –°–∫–æ—Ä–æ—Å—Ç—å –ø–∞–¥–µ–Ω–∏—è –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
  double fallSpeed = 3.0;

  @override
  void initState() {
    super.initState();
    startGame();
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
  void startGame() {
    crystals.clear();

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    // –¢–∞–π–º–µ—Ä –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 50 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
    // –∏ –≤—ã–∑—ã–≤–∞–µ—Ç updateGame
    gameTimer = Timer.periodic(const Duration(milliseconds: 50), (timer) {
      updateGame();
    });
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É
  void updateGame() {
    setState(() {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
      for (int i = 0; i < crystals.length; i++) {
        crystals[i] = Crystal(x: crystals[i].x, y: crystals[i].y + fallSpeed);
      }

      // –£–¥–∞–ª—è–µ–º –∫—Ä–∏—Å—Ç–∞–ª–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞
      crystals.removeWhere((crystal) => crystal.y > screenHeight);

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
      if (Random().nextDouble() < 0.02) {
        crystals.add(Crystal(x: Random().nextDouble() * (screenWidth - 50), y: -50));
      }
    });
  }

  @override
  void dispose() {
    gameTimer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    screenWidth = MediaQuery.sizeOf(context).width;
    screenHeight = MediaQuery.sizeOf(context).height;

    return GestureDetector(
      onHorizontalDragUpdate: (details) {
        setState(() {
          playerX += details.delta.dx;
          playerX = playerX.clamp(0.0, screenWidth - 50);
        });
      },
      child: Scaffold(
        backgroundColor: Colors.grey[200],
        body: Stack(
          children: [
            // –ö–æ—Ä–∑–∏–Ω–∫–∞
            Positioned(
              left: playerX,
              bottom: 100,
              child: Container(
                width: 50,
                height: 50,
                color: Colors.transparent,
                child: const Center(child: Text('üß∫', style: TextStyle(fontSize: 30))),
              ),
            ),
            // –ö—Ä–∏—Å—Ç–∞–ª–ª—ã
            ...crystals.map(
              (crystal) => Positioned(
                left: crystal.x,
                top: crystal.y,
                child: Container(
                  width: 50,
                  height: 50,
                  color: Colors.transparent,
                  child: const Center(child: Text('üíé', style: TextStyle(fontSize: 30))),
                ),
              ),
            ),
            // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
            const Positioned(
              top: 50,
              left: 0,
              right: 0,
              child: Text(
                'Step 3: Falling Crystals\n\n'
                'Crystals fall from the top\n\n'
                'Next steps:\n'
                '- Add score counter\n'
                '- Add game over condition',
                textAlign: TextAlign.center,
                style: TextStyle(fontSize: 24),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class Crystal {
  final double x;
  final double y;

  const Crystal({required this.x, required this.y});
}
